package com.ko.lct.web.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.support.JdbcDaoSupport;
import org.springframework.stereotype.Service;

import com.ko.lct.common.bean.BaseDictionaryItem;
import com.ko.lct.common.util.LocatorConstants;
import com.ko.lct.web.bean.MappingType;

@Service
public class MappingDao extends JdbcDaoSupport {

    private static final String GET_GENERIC_ITEMS_LIST_SQL =
	    "select LKP_CD, NAME from T_LKP where LKP_TYPE_ID = ? \n"+
		    "   and ACTV_IND = 1 \n" +
		    "   and (   LKP_TYPE_ID not in (" + LocatorConstants.LOOKUP_PRIMARY_CONTAINER + ", " + LocatorConstants.LOOKUP_SECONDARY_PACKAGE + ")" +
		    "        or (substr(LKP_CD,1,3) = 'ZZZ' and length(LKP_CD) = 7)) \n" +
		    " order by decode(LKP_TYPE_ID, " + LocatorConstants.LOOKUP_SECONDARY_PACKAGE + ", LPAD(NAME,10,'0'), upper(NAME))";

    private static final String GET_UNMAPPED_ITEMS_LIST_SQL =
	    "select SRC_VAL from T_MAP where LKP_TYPE_ID = ? and MAP_IND = 0 order by SRC_VAL";

    private static final String GET_MAPPED_ITEMS_LIST_SQL =
	    "select SRC_VAL from T_MAP where LKP_TYPE_ID = ? and LKP_CD = ? and MAP_IND = 1 order by SRC_VAL";
    
    private static final String MAP_VALUE_SQL =
	    "update T_MAP set LKP_CD = ?, MAP_IND = '1' where LKP_TYPE_ID = ? and SRC_VAL = ? and MAP_IND = 0";
    
    private static final String DELETE_DUMMY_LOOKUP_SQL =
	    "delete from T_LKP where LKP_TYPE_ID = ? and LKP_CD = ? and ACTV_IND = 0";
    
    private static final String SELECT_MAP_CODE_SQL =
	    "select LKP_CD from T_MAP where LKP_TYPE_ID = ? and SRC_VAL = ? and MAP_IND = 0";
    
    public static final String GET_LOOKUP_CODE_BY_NAME_QUERY = 
	    "select LKP_CD from T_LKP where LKP_TYPE_ID = ? and NAME = ? ";
    
    public static final String GET_DUMMY_LOOKUP_CODE_QUERY = 
	    "select 'ZZZ' || trim(to_char(nvl(max(to_number(substr(LKP_CD, 4))),0)+1,'0000')) from T_LKP where substr(LKP_CD,1,3) = 'ZZZ'";
    
    public static final String INSERT_DUMMY_LOOKUP_QUERY =
	    "insert into T_LKP (LKP_TYPE_ID, LKP_CD, NAME, ACTV_IND) values (?, ?, ?, 0) ";

    private static final String UNMAP_VALUE_SQL =
	    "update T_MAP set LKP_CD = ?, MAP_IND = 0 where LKP_TYPE_ID = ? and SRC_VAL = ? and LKP_CD = ?";
    
    private static final String ADD_NEW_GENERIC_VALUE_WITH_CODE_SQL =
	    "insert into T_LKP (LKP_TYPE_ID, LKP_CD, NAME, ACTV_IND) values (?, ?, ?, 1)";
    
    private static final String ADD_NEW_GENERIC_VALUE_AUTOGENERATED_CODE_SQL =
	    "insert into T_LKP (LKP_TYPE_ID, ACTV_IND, LKP_CD, NAME) values (?, 1, (select 'ZZZ' || trim(to_char(nvl(max(to_number(substr(LKP_CD, 4))),0)+1,'0000')) from T_LKP where substr(LKP_CD,1,3) = 'ZZZ'), ?)";
    
    private static final String UPDATE_GENERIC_VALUE_SQL =
	    "update T_LKP set NAME = ? where LKP_TYPE_ID = ? and LKP_CD = ? ";

    private static final String REMOVE_GENERIC_VALUE_SQL =
	    "delete from T_LKP where LKP_TYPE_ID = ? and LKP_CD = ?";
    
    private static final String MAPPING_TYPES_SQL =
	    "select LKP_TYPE_ID, NAME from T_LKP_TYPE order by LKP_TYPE_ID";
    
    private static final String REMAP_BRAND_SQL =
	    "update T_PRD set BRND_CD = ? where BRND_CD = ? ";
    
    private static final String REMAP_BRAND_PRD_PKG_SQL =
	    "update T_PRD_PKG set BRND_CD = ? where BRND_CD = ? ";
    
    private static final String REMAP_FLAVOR_SQL =
	    "update T_PRD set FLVR_CD = ? where FLVR_CD = ? ";
    
    private static final String REMAP_FLAVOR_PRD_PKG_SQL =
	    "update T_PRD_PKG set FLVR_CD = ? where FLVR_CD = ? ";
    
    private static final String REMAP_PRIMARY_CONTAINER_SQL =
	    "update T_PKG set PRIM_SHRT_CD = ? where PRIM_SHRT_CD = ? ";
    
    private static final String REMAP_SECONDARY_PACKAGE_SQL =
	    "update T_PKG set SECN_SHRT_CD = ? where SECN_SHRT_CD = ? ";
    
    private static final String REMAP_TRADE_SUB_CHANNEL_SQL =
	    "update T_OUTLET set SB_CHNL_ID = ? where SB_CHNL_ID = ? ";
    
    private static final String REMAP_PRODUCT_SQL =    
	    "declare \n" + 
	    "  v_new_prd_cd T_PRD.PRD_CD%type; \n" + 
	    "  v_old_prd_cd T_PRD.PRD_CD%type; \n" + 
	    "  v_cur_prd_pkg_id T_PRD_PKG.PRD_PKG_ID%type; \n" + 
	    "  cursor c_duplicate_prd_pkg(prdpkgid integer, prdcd varchar2) is select PRD_PKG_ID \n" + 
	    "      from T_PRD_PKG p1 \n" + 
	    "     where exists (select 1  \n" + 
	    "                     from T_PRD_PKG p2 \n" + 
	    "                    where p1.PKG_PRIM_CD = p2.PKG_PRIM_CD \n" + 
	    "                     and p1.PKG_SECN_CD = p2.PKG_SECN_CD \n" + 
	    "                      and p1.PRD_PKG_TYPE_ID = p2.PRD_PKG_TYPE_ID \n" + 
	    "                      and (p1.BPP_CD = p2.BPP_CD or (p1.BPP_CD is null and p2.BPP_CD is null)) \n" + 
	    "                      and (p1.PHYS_ST_CD = p2.PHYS_ST_CD or (p1.PHYS_ST_CD is null and p2.PHYS_ST_CD is null)) \n" + 
	    "                      and p1.PRD_PKG_ID <> p2.PRD_PKG_ID \n" + 
	    "                      and p2.PRD_PKG_ID = prdpkgid \n" + 
	    "                  ) \n" + 
	    "      and p1.PRD_CD = prdcd; \n" + 
	    "begin  \n" + 
	    " \n" + 
	    "  v_new_prd_cd := ?; \n" + 
	    "  v_old_prd_cd := ?; \n" + 
	    " \n" + 
	    "  insert into T_PRD (PRD_CD, BRND_CD, FLVR_CD) \n" + 
	    "              select v_new_prd_cd, BRND_CD, FLVR_CD \n" + 
	    "                from T_PRD \n" + 
	    "               where PRD_CD = v_old_prd_cd  \n" + 
	    "                 and not exists (select 1 from T_PRD where PRD_CD = v_new_prd_cd); \n" + 
	    " \n" + 
	    "  for v_prd_pkg in (select p.PRD_PKG_ID, nvl((select 1 from T_DELIV d where p.PRD_PKG_ID = d.PRD_PKG_ID and rownum = 1), 0) as EXIST_DELIV \n" + 
	    "                      from T_PRD_PKG p   \n" + 
	    "                     where p.PRD_CD = v_old_prd_cd) loop          \n" +                     
	    "        \n" + 
	    "    open c_duplicate_prd_pkg(v_prd_pkg.PRD_PKG_ID, v_new_prd_cd); \n" + 
	    "    fetch c_duplicate_prd_pkg into v_cur_prd_pkg_id; \n" + 
	    "       \n" + 
	    "    if c_duplicate_prd_pkg%found then       \n" +   
	    "      if v_prd_pkg.EXIST_DELIV = 1 then      \n" +                        
	    "        for v_deliv in (select d1.DELIV_ID as NEW_DELIV_ID,  \n" + 
	    "                              d1.DELIV_DT as NEW_DELIV_DT,  \n" + 
	    "                               d2.DELIV_ID as OLD_DELIV_ID,  \n" + 
	    "                               d2.DELIV_DT as OLD_DELIV_DT \n" + 
	    "                         from T_DELIV d1, \n" + 
	    "                             T_DELIV d2 \n" + 
	    "                        where d1.OUTLET_ID  = d2.OUTLET_ID \n" + 
	    "                          and d1.PRD_PKG_ID = v_cur_prd_pkg_id \n" + 
	    "                          and d2.PRD_PKG_ID = v_prd_pkg.PRD_PKG_ID) loop \n" + 
	    "          delete from T_DELIV where DELIV_ID = v_deliv.OLD_DELIV_ID; \n" + 
	    "         if v_deliv.NEW_DELIV_DT < v_deliv.OLD_DELIV_DT then  \n" + 
	    "           update T_DELIV set DELIV_DT = v_deliv.OLD_DELIV_DT where DELIV_ID = v_deliv.NEW_DELIV_ID; \n" + 
	    "         end if; \n" + 
	    "        end loop; \n" + 
	    "                 \n" + 
	    "        update T_DELIV set PRD_PKG_ID = v_cur_prd_pkg_id where PRD_PKG_ID = v_prd_pkg.PRD_PKG_ID;   \n" + 
	    "     \n" + 
	    "      end if; \n" + 
	    "      delete from T_PRD_PKG where PRD_PKG_ID = v_prd_pkg.PRD_PKG_ID; \n" + 
	    "    end if; \n" + 
	    "    \n" + 
	    "    close c_duplicate_prd_pkg; \n" + 
	    "    \n" + 
	    "    update T_PRD_PKG set PRD_CD = v_new_prd_cd where PRD_PKG_ID = v_prd_pkg.PRD_PKG_ID; \n" + 
	    " \n" + 
	    "  end loop; \n" + 
	    "   \n" + 
	    "  delete from T_BEV_CAT_PRD where PRD_CD = v_old_prd_cd; \n" + 
	    "  delete from T_PRD where PRD_CD = v_old_prd_cd; \n" + 
	    "end;\n"; 

    @Autowired
    public void init(DataSource dataSource) {
	super.setDataSource(dataSource);
    }
    
    public List<BaseDictionaryItem> getGenericItemsList(String mappingTypeCode) {
	return getJdbcTemplate().query(GET_GENERIC_ITEMS_LIST_SQL, new Object[] {mappingTypeCode},
		new RowMapper<BaseDictionaryItem>() {

		    @Override
		    public BaseDictionaryItem mapRow(ResultSet rs, int rowNum) throws SQLException {
			BaseDictionaryItem row = new BaseDictionaryItem();
			row.setCode(rs.getString("LKP_CD"));
			row.setName(rs.getString("NAME"));
			return row;
		    }
	});
    }
    
    public List<String> getUnmappedItemsList(String mappingTypeCode) {
	return getJdbcTemplate().query(GET_UNMAPPED_ITEMS_LIST_SQL, new Object[] {mappingTypeCode},
		new RowMapper<String>() {
		    @Override
		    public String mapRow(ResultSet rs, int rowNum) throws SQLException {
			return rs.getString(1);
		    }
	});
    }
    
    public List<String> getMappedItemsList(String mappingTypeCode, String genericCode) {
	return getJdbcTemplate().query(GET_MAPPED_ITEMS_LIST_SQL, new Object[] {mappingTypeCode, genericCode},
		new RowMapper<String>() {
		    @Override
		    public String mapRow(ResultSet rs, int rowNum) throws SQLException {
			return rs.getString(1);
		    }
	});
    }
    
    public boolean mapValue(Integer mappingTypeCode, String genericCode, String value) {
	String oldMapCode = getJdbcTemplate().query(SELECT_MAP_CODE_SQL, new Object[] {mappingTypeCode, value},
		new ResultSetExtractor<String>() {
		    @Override
		    public String extractData(ResultSet rs) throws SQLException, DataAccessException {
			String code = null;
			if(rs.next()) 
			    code = rs.getString(1);
			return code;
		    }
	});
	updateMappingValue(mappingTypeCode.intValue(), oldMapCode, genericCode);
	boolean updateFlag = getJdbcTemplate().update(MAP_VALUE_SQL, genericCode, mappingTypeCode, value) > 0;
	if(updateFlag && oldMapCode != null) {
	    getJdbcTemplate().update(DELETE_DUMMY_LOOKUP_SQL, mappingTypeCode, oldMapCode);
	}
	return updateFlag;
    }

    public boolean unmapValue(String mappingTypeCode, String genericCode, String value) {
	
	boolean updateFlag = false;
	boolean existLookup = false;
	
	String lookupCode = getJdbcTemplate().query(GET_LOOKUP_CODE_BY_NAME_QUERY, 
		new ResultSetExtractor<String>() {
		    @Override
		    public String extractData(ResultSet rs) throws SQLException, DataAccessException {
			String code = null;
			if(rs.next()) 
			    code = rs.getString(1);
			return code;
		    }
	}, mappingTypeCode, value);
	
	if(lookupCode == null) {
	    lookupCode = getJdbcTemplate().query(GET_DUMMY_LOOKUP_CODE_QUERY,
		new ResultSetExtractor<String>() {
		    @Override
		    public String extractData(ResultSet rs) throws SQLException, DataAccessException {
			String code = null;
			if(rs.next()) 
			    code = rs.getString(1);
			return code;
		    }
	    });
	    updateFlag = getJdbcTemplate().update(INSERT_DUMMY_LOOKUP_QUERY, mappingTypeCode, lookupCode, value) > 0;
	} else {
	    existLookup = true;
	}
    	if(updateFlag || existLookup) {
    	    updateFlag = getJdbcTemplate().update(UNMAP_VALUE_SQL, lookupCode, mappingTypeCode, value, genericCode) > 0;
    	}
	return updateFlag || existLookup;
    }
    
    private void updateMappingValue(int mappingTypeCode, String oldMapCode, String newMapCode) {
	String query = null;
	switch (mappingTypeCode) {
	case LocatorConstants.LOOKUP_BRAND:
	    query = REMAP_BRAND_SQL;
	    break;
	case LocatorConstants.LOOKUP_FLAVOR:
	    query = REMAP_FLAVOR_SQL;	    
	    break;
	case LocatorConstants.LOOKUP_PRIMARY_CONTAINER:
	    query = REMAP_PRIMARY_CONTAINER_SQL;	    
	    break;
	case LocatorConstants.LOOKUP_SECONDARY_PACKAGE:
	    query = REMAP_SECONDARY_PACKAGE_SQL;	    
	    break;
	case LocatorConstants.LOOKUP_TRADE_SUB_CHANNEL:
	    query = REMAP_TRADE_SUB_CHANNEL_SQL;	    
	    break;
	case LocatorConstants.LOOKUP_PRODUCT:
	    query = REMAP_PRODUCT_SQL;
	    break;
	default:
	    break;
	}
	if(query != null) {
	    getJdbcTemplate().update(query, newMapCode, oldMapCode);
	    if(mappingTypeCode == LocatorConstants.LOOKUP_BRAND) {
		getJdbcTemplate().update(REMAP_BRAND_PRD_PKG_SQL, newMapCode, oldMapCode);		
	    } else if(mappingTypeCode == LocatorConstants.LOOKUP_FLAVOR) {
		getJdbcTemplate().update(REMAP_FLAVOR_PRD_PKG_SQL, newMapCode, oldMapCode);		
	    }	 
	}
    }
    
    public boolean addNewGenericValue(String mappingTypeCode, String isAutoGenerateCode, String newCode, String newValue) {
	boolean updateFlag = false;
	if ("1".equals(isAutoGenerateCode)) {
	    updateFlag = getJdbcTemplate().update(ADD_NEW_GENERIC_VALUE_AUTOGENERATED_CODE_SQL, mappingTypeCode, newValue) > 0;
	} else {
	    updateFlag = getJdbcTemplate().update(ADD_NEW_GENERIC_VALUE_WITH_CODE_SQL, mappingTypeCode, newCode, newValue) > 0;
	}
	return updateFlag;
    }
    
    public boolean updateGenericValue(String mappingTypeCode, String editCode, String editValue) {
	return getJdbcTemplate().update(UPDATE_GENERIC_VALUE_SQL, editValue,  mappingTypeCode, editCode) > 0;
    }
    
    public boolean removeGenericValue(String mappingTypeCode, String code) {
	return getJdbcTemplate().update(REMOVE_GENERIC_VALUE_SQL, mappingTypeCode, code) > 0;
    }

    public List<MappingType> getMappingTypes() {
	List<MappingType> mappingTypesList = getJdbcTemplate().query(MAPPING_TYPES_SQL, new RowMapper<MappingType>() {

	    @Override
	    public MappingType mapRow(ResultSet rs, int rowNumber) throws SQLException {

		MappingType mt = new MappingType();
		mt.setCode(rs.getString("LKP_TYPE_ID"));
		mt.setName(rs.getString("NAME"));
		return mt;
	    }

	});
	return mappingTypesList;
    }

}